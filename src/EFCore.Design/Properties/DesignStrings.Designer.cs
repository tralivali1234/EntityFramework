// <auto-generated />

using System.Reflection;
using System.Resources;
using JetBrains.Annotations;

namespace Microsoft.EntityFrameworkCore.Internal
{
    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static class DesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Properties.DesignStrings", typeof(DesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     The name '{migrationName}' is used by an existing migration.
        /// </summary>
        public static string DuplicateMigrationName([CanBeNull] object migrationName)
            => string.Format(
                GetString("DuplicateMigrationName", nameof(migrationName)),
                migrationName);

        /// <summary>
        ///     More than one DbContext was found. Specify which one to use. Use the '-Context' parameter for PowerShell commands and the '--context' parameter for dotnet commands.
        /// </summary>
        public static string MultipleContexts
            => GetString("MultipleContexts");

        /// <summary>
        ///     More than one DbContext named '{name}' was found. Specify which one to use by providing its fully qualified name.
        /// </summary>
        public static string MultipleContextsWithName([CanBeNull] object name)
            => string.Format(
                GetString("MultipleContextsWithName", nameof(name)),
                name);

        /// <summary>
        ///     More than one DbContext named '{name}' was found. Specify which one to use by providing its fully qualified name using its exact case.
        /// </summary>
        public static string MultipleContextsWithQualifiedName([CanBeNull] object name)
            => string.Format(
                GetString("MultipleContextsWithQualifiedName", nameof(name)),
                name);

        /// <summary>
        ///     No DbContext was found in assembly '{assembly}'. Ensure that you're using the correct assembly and that the type is neither abstract nor generic.
        /// </summary>
        public static string NoContext([CanBeNull] object assembly)
            => string.Format(
                GetString("NoContext", nameof(assembly)),
                assembly);

        /// <summary>
        ///     No DbContext named '{name}' was found.
        /// </summary>
        public static string NoContextWithName([CanBeNull] object name)
            => string.Format(
                GetString("NoContextWithName", nameof(name)),
                name);

        /// <summary>
        ///     Using context '{name}'.
        /// </summary>
        public static string LogUseContext([CanBeNull] object name)
            => string.Format(
                GetString("LogUseContext", nameof(name)),
                name);

        /// <summary>
        ///     Dropping database '{name}'.
        /// </summary>
        public static string LogDroppingDatabase([CanBeNull] object name)
            => string.Format(
                GetString("LogDroppingDatabase", nameof(name)),
                name);

        /// <summary>
        ///     Successfully dropped database '{name}'.
        /// </summary>
        public static string LogDatabaseDropped([CanBeNull] object name)
            => string.Format(
                GetString("LogDatabaseDropped", nameof(name)),
                name);

        /// <summary>
        ///     Cancelled.
        /// </summary>
        public static string Cancelled
            => GetString("Cancelled");

        /// <summary>
        ///     A manual migration deletion was detected.
        /// </summary>
        public static string ManuallyDeleted
            => GetString("ManuallyDeleted");

        /// <summary>
        ///     No file named '{file}' was found. You must manually remove the migration class '{migrationClass}'.
        /// </summary>
        public static string NoMigrationFile([CanBeNull] object file, [CanBeNull] object migrationClass)
            => string.Format(
                GetString("NoMigrationFile", nameof(file), nameof(migrationClass)),
                file, migrationClass);

        /// <summary>
        ///     No file named '{file}' was found.
        /// </summary>
        public static string NoMigrationMetadataFile([CanBeNull] object file)
            => string.Format(
                GetString("NoMigrationMetadataFile", nameof(file)),
                file);

        /// <summary>
        ///     No ModelSnapshot was found.
        /// </summary>
        public static string NoSnapshot
            => GetString("NoSnapshot");

        /// <summary>
        ///     No file named '{file}' was found. You must manually remove the model snapshot class '{snapshotClass}'.
        /// </summary>
        public static string NoSnapshotFile([CanBeNull] object file, [CanBeNull] object snapshotClass)
            => string.Format(
                GetString("NoSnapshotFile", nameof(file), nameof(snapshotClass)),
                file, snapshotClass);

        /// <summary>
        ///     Removing migration '{name}'.
        /// </summary>
        public static string RemovingMigration([CanBeNull] object name)
            => string.Format(
                GetString("RemovingMigration", nameof(name)),
                name);

        /// <summary>
        ///     Removing model snapshot.
        /// </summary>
        public static string RemovingSnapshot
            => GetString("RemovingSnapshot");

        /// <summary>
        ///     Reverting model snapshot.
        /// </summary>
        public static string RevertingSnapshot
            => GetString("RevertingSnapshot");

        /// <summary>
        ///     The migration '{name}' has already been applied to the database. Unapply it and try again. If the migration has been applied to other databases, consider reverting its changes using a new migration.
        /// </summary>
        public static string UnapplyMigration([CanBeNull] object name)
            => string.Format(
                GetString("UnapplyMigration", nameof(name)),
                name);

        /// <summary>
        ///     The current CSharpMigrationOperationGenerator cannot scaffold operations of type '{operationType}'. Configure your services to use one that can.
        /// </summary>
        public static string UnknownOperation([CanBeNull] object operationType)
            => string.Format(
                GetString("UnknownOperation", nameof(operationType)),
                operationType);

        /// <summary>
        ///     The current CSharpHelper cannot scaffold literals of type '{literalType}'. Configure your services to use one that can.
        /// </summary>
        public static string UnknownLiteral([CanBeNull] object literalType)
            => string.Format(
                GetString("UnknownLiteral", nameof(literalType)),
                literalType);

        /// <summary>
        ///     Unable to find provider assembly with name {assemblyName}. Ensure the specified name is correct and is referenced by the project.
        /// </summary>
        public static string CannotFindRuntimeProviderAssembly([CanBeNull] object assemblyName)
            => string.Format(
                GetString("CannotFindRuntimeProviderAssembly", nameof(assemblyName)),
                assemblyName);

        /// <summary>
        ///     An operation was scaffolded that may result in the loss of data. Please review the migration for accuracy.
        /// </summary>
        public static string DestructiveOperation
            => GetString("DestructiveOperation");

        /// <summary>
        ///     Reusing directory of file '{file}'.
        /// </summary>
        public static string ReusingDirectory([CanBeNull] object file)
            => string.Format(
                GetString("ReusingDirectory", nameof(file)),
                file);

        /// <summary>
        ///     Writing migration to '{file}'.
        /// </summary>
        public static string WritingMigration([CanBeNull] object file)
            => string.Format(
                GetString("WritingMigration", nameof(file)),
                file);

        /// <summary>
        ///     Writing model snapshot to '{file}'.
        /// </summary>
        public static string WritingSnapshot([CanBeNull] object file)
            => string.Format(
                GetString("WritingSnapshot", nameof(file)),
                file);

        /// <summary>
        ///     Done.
        /// </summary>
        public static string Done
            => GetString("Done");

        /// <summary>
        ///     Reusing namespace of type '{type}'.
        /// </summary>
        public static string ReusingNamespace([CanBeNull] object type)
            => string.Format(
                GetString("ReusingNamespace", nameof(type)),
                type);

        /// <summary>
        ///     Reusing model snapshot name '{name}'.
        /// </summary>
        public static string ReusingSnapshotName([CanBeNull] object name)
            => string.Format(
                GetString("ReusingSnapshotName", nameof(name)),
                name);

        /// <summary>
        ///     Unable to find design-time provider assembly. Please install the {designTimeProviderAssemblyName} NuGet package and ensure that the package is referenced by the project.
        /// </summary>
        public static string CannotFindDesignTimeProviderAssembly([CanBeNull] object designTimeProviderAssemblyName)
            => string.Format(
                GetString("CannotFindDesignTimeProviderAssembly", nameof(designTimeProviderAssemblyName)),
                designTimeProviderAssemblyName);

        /// <summary>
        ///     Unable to find expected assembly attribute named {attributeName} in provider assembly {runtimeProviderAssemblyName}. This attribute is required to identify the class which acts as the design-time service provider factory.
        /// </summary>
        public static string CannotFindDesignTimeProviderAssemblyAttribute([CanBeNull] object attributeName, [CanBeNull] object runtimeProviderAssemblyName)
            => string.Format(
                GetString("CannotFindDesignTimeProviderAssemblyAttribute", nameof(attributeName), nameof(runtimeProviderAssemblyName)),
                attributeName, runtimeProviderAssemblyName);

        /// <summary>
        ///     {provider} is not a Relational provider and therefore cannot be use with Migrations.
        /// </summary>
        public static string NonRelationalProvider([CanBeNull] object provider)
            => string.Format(
                GetString("NonRelationalProvider", nameof(provider)),
                provider);

        /// <summary>
        ///     Could not load assembly '{assembly}'. Ensure it is referenced by the startup project '{startupProject}'.
        /// </summary>
        public static string UnreferencedAssembly([CanBeNull] object assembly, [CanBeNull] object startupProject)
            => string.Format(
                GetString("UnreferencedAssembly", nameof(assembly), nameof(startupProject)),
                assembly, startupProject);

        /// <summary>
        ///     Finding DbContext classes...
        /// </summary>
        public static string LogFindingContexts
            => GetString("LogFindingContexts");

        /// <summary>
        ///     The namespace '{migrationsNamespace}' contains migrations for a different DbContext. This can result in conflicting migration names. It's recommend to put migrations for different DbContext classes into different namespaces.
        /// </summary>
        public static string ForeignMigrations([CanBeNull] object migrationsNamespace)
            => string.Format(
                GetString("ForeignMigrations", nameof(migrationsNamespace)),
                migrationsNamespace);

        /// <summary>
        ///     ConnectionString is required to generate code.
        /// </summary>
        public static string ConnectionStringRequired
            => GetString("ConnectionStringRequired");

        /// <summary>
        ///     The context class name passed in, {contextClassName}, is not a valid C# identifier.
        /// </summary>
        public static string ContextClassNotValidCSharpIdentifier([CanBeNull] object contextClassName)
            => string.Format(
                GetString("ContextClassNotValidCSharpIdentifier", nameof(contextClassName)),
                contextClassName);

        /// <summary>
        ///     ProjectPath is required to generate code.
        /// </summary>
        public static string ProjectPathRequired
            => GetString("ProjectPathRequired");

        /// <summary>
        ///     Root namespace of the project is required to generate code.
        /// </summary>
        public static string RootNamespaceRequired
            => GetString("RootNamespaceRequired");

        /// <summary>
        ///     Your target project '{assembly}' doesn't match your migrations assembly '{migrationsAssembly}'. Either change your target project or change your migrations assembly.
        ///     Change your migrations assembly by using DbContextOptionsBuilder. E.g. options.UseSqlServer(connection, b =&gt; b.MigrationsAssembly("{assembly}")). By default, the migrations assembly is the assembly containing the DbContext.
        ///     Change your target project to the migrations project by using the Package Manager Console's Default project drop-down list, or by executing "dotnet ef" from the directory containing the migrations project.
        /// </summary>
        public static string MigrationsAssemblyMismatch([CanBeNull] object assembly, [CanBeNull] object migrationsAssembly)
            => string.Format(
                GetString("MigrationsAssemblyMismatch", nameof(assembly), nameof(migrationsAssembly)),
                assembly, migrationsAssembly);

        /// <summary>
        ///     To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
        /// </summary>
        public static string SensitiveInformationWarning
            => GetString("SensitiveInformationWarning");

        /// <summary>
        ///     Removing migration '{name}' without checking the database. If this migration has been applied to the database, you will need to manually reverse the changes it made.
        /// </summary>
        public static string ForceRemoveMigration([CanBeNull] object name)
            => string.Format(
                GetString("ForceRemoveMigration", nameof(name)),
                name);

        /// <summary>
        ///     No parameterless constructor was found on '{contextType}'. Either add a parameterless constructor to '{contextType}' or add an implementation of 'IDbContextFactory&lt;{contextType}&gt;' in the same assembly as '{contextType}'.
        /// </summary>
        public static string NoParameterlessConstructor([CanBeNull] object contextType)
            => string.Format(
                GetString("NoParameterlessConstructor", nameof(contextType)),
                contextType);

        /// <summary>
        ///     Database '{name}' did not exist, no action was taken.
        /// </summary>
        public static string LogNotExistDatabase([CanBeNull] object name)
            => string.Format(
                GetString("LogNotExistDatabase", nameof(name)),
                name);

        /// <summary>
        ///     An error occurred while calling method '{method}' on startup class '{startupClass}'. Consider using IDbContextFactory to override the initialization of the DbContext at design-time. Error: {error}
        /// </summary>
        public static string InvokeStartupMethodFailed([CanBeNull] object method, [CanBeNull] object startupClass, [CanBeNull] object error)
            => string.Format(
                GetString("InvokeStartupMethodFailed", nameof(method), nameof(startupClass), nameof(error)),
                method, startupClass, error);

        /// <summary>
        ///     Could not serialize {obj} [{name}]
        /// </summary>
        public static string CouldNotSerialize([CanBeNull] object obj, [CanBeNull] object name)
            => string.Format(
                GetString("CouldNotSerialize", nameof(obj), nameof(name)),
                obj, name);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
