// <auto-generated />

using System.Reflection;
using System.Resources;
using JetBrains.Annotations;

namespace Microsoft.EntityFrameworkCore.Internal
{
    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static class SqlServerDesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Properties.SqlServerDesignStrings", typeof(SqlServerDesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     For column {columnId}. This column is set up as an Identity column, but the SQL Server data type is {sqlServerDataType}. This will be mapped to CLR type byte which does not allow the SqlServerValueGenerationStrategy.IdentityColumn setting. Generating a matching Property but ignoring the Identity setting.
        /// </summary>
        public static string DataTypeDoesNotAllowSqlServerIdentityStrategy([CanBeNull] object columnId, [CanBeNull] object sqlServerDataType)
            => string.Format(
                GetString("DataTypeDoesNotAllowSqlServerIdentityStrategy", nameof(columnId), nameof(sqlServerDataType)),
                columnId, sqlServerDataType);

        /// <summary>
        ///     Found default schema {defaultSchema}.
        /// </summary>
        public static string FoundDefaultSchema([CanBeNull] object defaultSchema)
            => string.Format(
                GetString("FoundDefaultSchema", nameof(defaultSchema)),
                defaultSchema);

        /// <summary>
        ///     Found type alias with name: {alias} which maps to underlying data type {dataType}.
        /// </summary>
        public static string FoundTypeAlias([CanBeNull] object alias, [CanBeNull] object dataType)
            => string.Format(
                GetString("FoundTypeAlias", nameof(alias), nameof(dataType)),
                alias, dataType);

        /// <summary>
        ///     Found column with table: {tableName}, column name: {columnName}, data type: {dataType}, ordinal: {ordinal}, nullable: {isNullable}, primary key ordinal: {primaryKeyOrdinal}, default value: {defaultValue}, computed value: {computedValue}, precision: {precision}, scale: {scale}, maximum length: {maxLength}, identity: {isIdentity}, computed: {isComputed}.
        /// </summary>
        public static string FoundColumn([CanBeNull] object tableName, [CanBeNull] object columnName, [CanBeNull] object dataType, [CanBeNull] object ordinal, [CanBeNull] object isNullable, [CanBeNull] object primaryKeyOrdinal, [CanBeNull] object defaultValue, [CanBeNull] object computedValue, [CanBeNull] object precision, [CanBeNull] object scale, [CanBeNull] object maxLength, [CanBeNull] object isIdentity, [CanBeNull] object isComputed)
            => string.Format(
                GetString("FoundColumn", nameof(tableName), nameof(columnName), nameof(dataType), nameof(ordinal), nameof(isNullable), nameof(primaryKeyOrdinal), nameof(defaultValue), nameof(computedValue), nameof(precision), nameof(scale), nameof(maxLength), nameof(isIdentity), nameof(isComputed)),
                tableName, columnName, dataType, ordinal, isNullable, primaryKeyOrdinal, defaultValue, computedValue, precision, scale, maxLength, isIdentity, isComputed);

        /// <summary>
        ///     Found foreign key column with table: {tableName}, foreign key name: {fkName}, principal table: {principalTableName}, column name: {columnName}, principal column name: {principalColumnName}, update action: {updateAction}, delete action: {deleteAction}, ordinal: {ordinal}.
        /// </summary>
        public static string FoundForeignKeyColumn([CanBeNull] object tableName, [CanBeNull] object fkName, [CanBeNull] object principalTableName, [CanBeNull] object columnName, [CanBeNull] object principalColumnName, [CanBeNull] object updateAction, [CanBeNull] object deleteAction, [CanBeNull] object ordinal)
            => string.Format(
                GetString("FoundForeignKeyColumn", nameof(tableName), nameof(fkName), nameof(principalTableName), nameof(columnName), nameof(principalColumnName), nameof(updateAction), nameof(deleteAction), nameof(ordinal)),
                tableName, fkName, principalTableName, columnName, principalColumnName, updateAction, deleteAction, ordinal);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
