// <auto-generated />

using System.Reflection;
using System.Resources;
using JetBrains.Annotations;

namespace Microsoft.EntityFrameworkCore.Internal
{
    /// <summary>
    ///		This API supports the Entity Framework Core infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public static class SqliteDesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.EntityFrameworkCore.Properties.SqliteDesignStrings", typeof(SqliteDesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     Scaffolding from a SQLite database will ignore any schema selection arguments. 
        /// </summary>
        public static string UsingSchemaSelectionsWarning
            => GetString("UsingSchemaSelectionsWarning");

        /// <summary>
        ///     Found column on table: {tableName}, column name: {columnName}, data type: {dataType}, ordinal: {ordinal}, not nullable: {isNotNullable}, primary key ordinal: {primaryKeyOrdinal}, default value: {defaultValue}.
        /// </summary>
        public static string FoundColumn([CanBeNull] object tableName, [CanBeNull] object columnName, [CanBeNull] object dataType, [CanBeNull] object ordinal, [CanBeNull] object isNotNullable, [CanBeNull] object primaryKeyOrdinal, [CanBeNull] object defaultValue)
            => string.Format(
                GetString("FoundColumn", nameof(tableName), nameof(columnName), nameof(dataType), nameof(ordinal), nameof(isNotNullable), nameof(primaryKeyOrdinal), nameof(defaultValue)),
                tableName, columnName, dataType, ordinal, isNotNullable, primaryKeyOrdinal, defaultValue);

        /// <summary>
        ///     Found foreign key column on table: {tableName}, id: {id}, principal table: {principalTableName}, column name: {columnName}, principal column name: {principalColumnName}, delete action: {deleteAction}, ordinal: {ordinal}.
        /// </summary>
        public static string FoundForeignKeyColumn([CanBeNull] object tableName, [CanBeNull] object id, [CanBeNull] object principalTableName, [CanBeNull] object columnName, [CanBeNull] object principalColumnName, [CanBeNull] object deleteAction, [CanBeNull] object ordinal)
            => string.Format(
                GetString("FoundForeignKeyColumn", nameof(tableName), nameof(id), nameof(principalTableName), nameof(columnName), nameof(principalColumnName), nameof(deleteAction), nameof(ordinal)),
                tableName, id, principalTableName, columnName, principalColumnName, deleteAction, ordinal);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
